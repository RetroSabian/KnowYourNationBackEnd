// <auto-generated />
using System;
using Know_Your_Nation_Speedy.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Know_Your_Nation_Speedy.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20190206123622_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Animation", b =>
                {
                    b.Property<int>("AnimationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverImageLocation");

                    b.Property<string>("Description");

                    b.Property<string>("FileLocation");

                    b.Property<string>("Name");

                    b.HasKey("AnimationId");

                    b.ToTable("AnimationEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.AnimationsWatched", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("AnimationId");

                    b.Property<int>("Rating");

                    b.Property<bool>("WatchedStatus");

                    b.HasKey("UserId", "AnimationId");

                    b.HasIndex("AnimationId");

                    b.ToTable("AnimationsWatchedEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverImageLocation");

                    b.Property<string>("Description");

                    b.Property<string>("FileLocation");

                    b.Property<bool>("InRotation");

                    b.Property<string>("Name");

                    b.Property<string>("Nation");

                    b.HasKey("ArticleId");

                    b.ToTable("ArticlesEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.ArticlesRead", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ArticleId");

                    b.Property<bool>("GivenStatus");

                    b.Property<int>("Rating");

                    b.Property<bool>("ReadStatus");

                    b.HasKey("UserId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlesReadEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverImageLocation");

                    b.Property<string>("Description");

                    b.Property<string>("FileLocation");

                    b.Property<string>("Name");

                    b.HasKey("BookId");

                    b.ToTable("BookEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.BooksRead", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BookId");

                    b.Property<int>("Rating");

                    b.Property<bool>("ReadStatus");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksReadEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Comic", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverImageLocation");

                    b.Property<string>("Description");

                    b.Property<string>("FileLocation");

                    b.Property<string>("Name");

                    b.HasKey("ComicId");

                    b.ToTable("ComicEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.ComicsRead", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ComicId");

                    b.Property<int>("Rating");

                    b.Property<bool>("ReadStatus");

                    b.HasKey("UserId", "ComicId");

                    b.HasIndex("ComicId");

                    b.ToTable("ComicsReadEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountDonated");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Organization");

                    b.Property<int?>("UserId");

                    b.HasKey("DonationId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Events", b =>
                {
                    b.Property<int>("EventsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("ProjectName");

                    b.Property<DateTime>("date");

                    b.HasKey("EventsId");

                    b.ToTable("VolunteerEventEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressToDeliever");

                    b.Property<DateTime>("DateOrdered");

                    b.Property<string>("TrackingNumber");

                    b.Property<int?>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrdersEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverImageLocation");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("QuantityOnHand");

                    b.Property<int>("Rating");

                    b.Property<string>("Type");

                    b.HasKey("ProductId");

                    b.ToTable("ProductEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.ProductOrders", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrdersEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("MembershipType");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Surname");

                    b.HasKey("UserId");

                    b.ToTable("UserEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.UserEvents", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("EventId");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("VolunteerEntries");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.AnimationsWatched", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.Animation", "animation")
                        .WithMany("animationsWatched")
                        .HasForeignKey("AnimationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("animationsWatched")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.ArticlesRead", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.Article", "articles")
                        .WithMany("articlesReads")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("articlesRead")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.BooksRead", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.Book", "book")
                        .WithMany("booksReads")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("booksReads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.ComicsRead", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.Comic", "comic")
                        .WithMany("comicsReads")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("comicsReads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Donation", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("donations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.Order", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.ProductOrders", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.Order", "orders")
                        .WithMany("productOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Know_Your_Nation_Speedy.Models.Product", "product")
                        .WithMany("productOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Know_Your_Nation_Speedy.Models.UserEvents", b =>
                {
                    b.HasOne("Know_Your_Nation_Speedy.Models.Events", "events")
                        .WithMany("userEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Know_Your_Nation_Speedy.Models.User", "user")
                        .WithMany("userEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
